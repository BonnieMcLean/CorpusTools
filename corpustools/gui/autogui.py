from .imports import *
from .windows import FunctionWorker, FunctionDialog
import itertools
import collections
from corpustools.mutualinfo import mutual_information

class AutoAnalysisError(Exception):
    pass

class AutoWorker(FunctionWorker):

    def __init__(self):
        super().__init__()

class AutoDialog(QDialog):

    def __init__(self, parent, corpus, showToolTips):
        self.corpus = corpus
        super().__init__()#parent, AutoWorker())
        self.setWindowTitle('Look for phonological patterns')
        self.layout = QVBoxLayout()
        self.layout.addWidget(QLabel('Select a phonological pattern'))

        self.vowelHarmonyLayout = QVBoxLayout()
        self.vowelHarmonyButton = QRadioButton()
        self.vowelHarmonyButton.toggle()
        self.vowelHarmonyButton.setText(('Search for vowel harmony.'
                                    ' Enter the name of the feature that distinguishes '
                                    'consonants and vowels in your corpus'))
        self.vowelFeatureEntry = QLineEdit()

        self.vowelHarmonyLayout.addWidget(self.vowelHarmonyButton)
        self.vowelHarmonyLayout.addWidget(self.vowelFeatureEntry)
        self.layout.addLayout(self.vowelHarmonyLayout)

        self.buttonBox = QHBoxLayout()
        self.okButton = QPushButton('OK')
        self.okButton.clicked.connect(self.calc)
        self.buttonBox.addWidget(self.okButton)
        self.cancelButton = QPushButton('Cancel')
        self.cancelButton.clicked.connect(self.reject)
        self.buttonBox.addWidget(self.okButton)
        self.buttonBox.addWidget(self.cancelButton)
        self.layout.addLayout(self.buttonBox)


        self.setLayout(self.layout)

    def calc(self):

        if self.vowelHarmonyButton.isChecked():
            text = self.vowelFeatureEntry.text()
            if text and not text in self.corpus.get_features():
                msg = QMessageBox()
                msg.setWindowTitle('Warning')
                msg.setText('Could not find this vowel feature')
                msg.exec_()
                return

            else:
                print(text)
                if not text.startswith('+'):
                    text = '+'+text
                self.corpus.add_tier('AutoGeneratedVowels',text)

        inventory = [seg for seg in self.corpus.inventory if seg.features[text[1:]]==text[0]]
        probs = collections.defaultdict(list)
        for pair in itertools.product(inventory,repeat=2):
            pair = (pair[0].symbol, pair[1].symbol)
            try:
                mi = mutual_information.pointwise_mi(self.corpus, pair, 'AutoGeneratedVowels')
                probs[pair[0]].append( (pair[1],mi) )
            except mutual_information.MutualInformationError:
                probs[pair[0]].append( (pair[1], '*') )

        harmonic_features = ['high', 'back', 'round']
        for feature in harmonic_features:
            plus = [seg for seg in inventory if seg.features[feature]=='+']
            minus = [seg for seg in inventory if not seg in plus]
            avg_pp_mi = list()
            avg_pm_mi = list()
            avg_mm_mi = list()
            avg_mp_mi = list()
            for seg in inventory:
                for seg2,mi in probs[seg.symbol]:
                    if mi == '*':
                        continue
                    seg2 = self.corpus.symbol_to_segment(seg2)
                    seg2_sign = seg.features[feature]
                    if seg in plus:
                        if seg2_sign == '+':
                            avg_pp_mi.append(mi)
                        else:
                            avg_pm_mi.append(mi)
                    elif seg in minus:
                        if seg2_sign == '-':
                            avg_mm_mi.append(mi)
                        else:
                            avg_mp_mi.append(mi)
            avg_pp_mi = sum(avg_pp_mi)/len(avg_pp_mi) if len(avg_pp_mi) else 'N/A'
            avg_pm_mi = sum(avg_pm_mi)/len(avg_pm_mi) if len(avg_pm_mi) else 'N/A'
            avg_mm_mi = sum(avg_mm_mi)/len(avg_mm_mi) if len(avg_mm_mi) else 'N/A'
            avg_mp_mi = sum(avg_mp_mi)/len(avg_mp_mi) if len(avg_mp_mi) else 'N/A'
            print('Average [+{0}][+{0}] MI = {1}'.format(feature, avg_pp_mi))
            print('Average [+{0}][-{0}] MI = {1}'.format(feature, avg_pm_mi))
            print('Average [-{0}][-{0}] MI = {1}'.format(feature, avg_mm_mi))
            print('Average [-{0}][+{0}] MI = {1}'.format(feature, avg_mp_mi))

        self.corpus.remove_attribute('AutoGeneratedVowels')
        return




